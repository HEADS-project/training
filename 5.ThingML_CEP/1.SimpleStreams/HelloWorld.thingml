datatype Integer<2>
@type_checker "Integer"
@java_type "int";

datatype Boolean<1>
@type_checker "Boolean"
@java_type "boolean";
 
/**
You can see that this thing is Platform-Independent: we are not using any C, Java or JavaScript code here.
/!\ However, do not expect it to compile in C, yet, as CEP is currenlty only available for Java and JavaScript at the moment
*/
thing SimpleCEP {

    //These are basic ThingML messages that you have manipulated before
    message m1();
    message m2(v1 : Integer, v2 : Integer);
    
    //These are CEP message that will be produced by CEP queries
    //Good news: they are just basic ThingML messages that you receive and send as usual
    message cep1();
    message cep2(v1 : Integer, v2 : Integer);
    message cep2b(v1 : Integer, v2 : Integer);
    
    //Internal ports can be used so that state machine and streams can exchange messages asynchronously
    //Note: internal ports do not have to (and cannot) be connected in the configuration. They are connected by default (to themselves)
    internal port cepPort {
        sends m1, m2, cep1, cep2, cep2b
        receives m1, m2, cep1, cep2, cep2b   
    }
            
    //This is a very simple CEP stream that just forwards a message
    //Note: we wouldn't really need CEP for that, it is just a slow introduction to the syntax of streams
    //IMPORTANT: the m1 messages consumed by this stream remain available for the state machine, which can also react on m1.
    stream forwardSimpleMessage from evt : cepPort?m1
    produce cepPort!cep1()
    
    //If you want to manipulate message parameters in CEP queries, use the following syntax
    stream forwardSimpleMessageWithParams from evt : cepPort?m2
    select var a : Integer = evt.v1, 
           var b : Integer = evt.v2
    produce cepPort!cep2(a,b)
    
    //You can transform message parameters directly in the select e.g. by calling a function
    //Select contains a set of variable, which can be assigned from any expression including function call, arithmetic operation, etc
    stream transformAndForward from evt : cepPort?m2
    select var a : Integer = (evt.v1 * 2), 
           var b : Integer = transform(evt.v2)
    produce cepPort!cep2b(a, b)
    
    function transform(v : Integer) : Integer do
        return v * v
    end

	statechart HelloWorld init Greetings {
        
        //Some booleans to keep track of the CEP results we receive
        //Note: we could use proper CEP to manage that :-)
        property cep1Rec : Boolean = false
        property cep2Rec : Boolean = false
        property cep2bRec : Boolean = false
	
		state Greetings {

            on entry do
                print "Welcome!\n\n"
                cepPort!m1() // This should trigger cep1
                cepPort!m2(1, 2) //This should trigger both cep2 and cep2b
            end
            
            internal event cepPort?cep1
            action do
                cep1Rec = true
                print "CEP1 received!\n"
            end
            
            internal event cepPort?cep2
            action do
                cep2Rec = true
                print "CEP2 received!\n"
            end
            
            internal event cepPort?cep2b
            action do
                cep2bRec = true
                print "CEP2B received!\n"
            end
			
			transition -> Bye 
			guard cep1Rec and cep2Rec and cep2bRec //exit when all CEP results have been received
			
		}
	
		state Bye {
			on entry print "\nBye.\n\n"
		}
	
	}
}

/**
TODO: compile and run this configuration for Java and JavaScript
Right-click on this file (in the Project Explorer on the left) and try:
HEADS / ThingML -> Plain Java
HEADS / ThingML -> Javascript for NodeJS
**/
configuration SimpleCEPCfg 
{
	instance my_instance: SimpleCEP
}
