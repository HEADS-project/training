datatype Integer<2>	
@type_checker "Integer"
@java_type "int";

datatype Boolean<1>
@type_checker "Boolean"
@java_type "boolean"
 
thing JoinCEP {

	property a : Integer = 0
	property b : Integer = 1

    message m1();
    message m1b()
    message m2(v1 : Integer, v2 : Integer);
    message m3(v1 : Integer);
    
    message cep1()
    message cep2(v1 : Integer, v2 : Integer)
    
    internal port cepPort {
        sends m1, m1b, m2, m3, cep1, cep2
        receives m1, m1b, m2, m3, cep1, cep2   
    }
        
    //This is a very simple CEP join that joins two message and forwards a message
    //Join can somehow be seen as logical "and" on events (see http://reactivex.io/documentation/operators/join.html)
    //Note: the @TTL annotation makes it possible to tweak the time defining the window when 2 messages are "joinable"
    //Default TTL is 250 ms (so we would not need the annotation if 250 ms is acceptable)
    dynamic stream simpleJoin @TTL "250"
    from result : [e1 : cepPort?m1 & e2 : cepPort?m1b -> cep1()]
    produce cepPort!cep1()
    
    stream simpleJoinWithParams @TTL "250"
    from result : [e2 : cepPort?m2 & e3 : cepPort?m3 -> cep2(e2.v1 + e3.v1, e2.v2)]
    select var a : Integer = result.v1 
           var b : Integer = result.v2
    produce cepPort!cep2(a, b)

	statechart HelloWorld init Greetings {
        
        //Some booleans to keep track of the CEP results we receive
        //Note: we could use proper CEP to manage that :-)
        property cep1Rec : Boolean = false
        property cep2Rec : Boolean = false
	
		state Greetings {

            on entry do
                print "Welcome!\n\n"
                
                start simpleJoin
                
                cepPort!m1() // Those two messages should trigger cep1
                cepPort!m1b()
                
                stop simpleJoin
                
                cepPort!m2(1, 2) //This should trigger both cep2 (1+3, 2)
                cepPort!m3(3)
            end
            
            internal event cepPort?cep1
            action do
                cep1Rec = true
                print "CEP1 received!\n"
            end
            
            internal event result : cepPort?cep2
            action do
                cep2Rec = true
                print "CEP2 received" + result.v1 + ", " + result.v2 + "!\n"
            end
            			
			transition -> Bye 
			guard cep1Rec and cep2Rec //exit when all CEP results have been received
			
		}
	
		state Bye {
			on entry print "\nBye.\n\n"
		}
	
	}
}
