datatype Boolean<1>
@type_checker "Boolean"
@java_type "boolean";

thing fragment TestMsgs {
    message m1(b : Boolean);
    message m2(b : Boolean);  
    
    message res(b : Boolean);
    message res2(b : Boolean);
}

thing TestMergeFilter includes TestMsgs
{
    internal port cep {
        sends m1, m2, res, res2
        receives m1, m2, res, res2
    }

    //filter all m1(true) | m2(false)
    //You can filter individual input streams and/or the output stream
    //Filter (keep if) can declare any boolean expression, including a call to a function returning a boolean (in case the filter is complex)
    stream filteredMergeOK
    from m : [ e1 : cep?m1::keep if e1.b | e2 : cep?m2::keep if not e2.b -> res]::keep if m.b
    select var a : Boolean = m.b
    produce cep!res(a)
    
    
    //filter all m1(true) | m2(false) + additional filter on the result (false)
    stream filteredMergeFail
    from m : [ e1 : cep?m1::keep if not e1.b | e2 : cep?m2::keep if e2.b -> res2]::keep if not m.b
    select var a : Boolean = m.b 
    produce cep!res2(a)


    statechart testSimpleFilter init Init {
        state Init {
            on entry do
                cep!m1(true)   //->res
                cep!m2(false)  //->res
                
                cep!m1(false)
                cep!m2(true)
                                
                cep!m1(true)  //->res
                cep!m2(false) //->res
                
                cep!m1(false)
                cep!m2(true)                               
            end
            
            internal 
            event e: cep?res
            action do            	
	       		print "res(" + e.b + ")\n"
            end
            
            internal 
            event e : cep?res2
            action do
            	print "res2(" + e.b + ")\n"
            end
        }
    }


}

configuration filterCfg {
	instance myinstance : TestMergeFilter
}
