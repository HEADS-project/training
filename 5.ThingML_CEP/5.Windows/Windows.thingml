import "./Timer.thingml"

datatype Integer<2>
@java_type "int";

datatype Float<4>
@java_type "float";

thing fragment TestMsgs {
    message m1(x : Integer);
    message m2(x : Integer);    
    message res(avg : Integer, min : Integer, max : Integer);
    message res2(avg : Integer, min : Integer, max : Integer);
}

thing TestWindows includes TestMsgs, TimerClient
{
    internal port intPort {
        sends m1, m2, res, res2
        receives m1, m2, res, res2
    }

	function average(x : Integer[]) : Float do
        if (x.length > 0) do
		  var i : Integer = 0
		  var sum : Integer = 0
		  while (i < x.length) do
		     sum = sum + x[i]
			 i = i + 1
		  end
		  return sum / x.length
        end else do
            error "Cannot compute average out of empty array\n"
            return 0
        end
	end
	
	function min(x : Integer[]) : Integer do
        if (x.length > 0) do
		  var i : Integer = 0
		  var min : Integer = x[0]
		  while (i < x.length) do
			if (x[i] < min) 
				min = x[i]
			i = i + 1
		  end
		  return min
       end else do
            error "Cannot compute min out of empty array\n"
            return 0       
       end
	end
	
	function max(x : Integer[]) : Integer do
        if (x.length > 0) do
		  var i : Integer = 0
		  var max : Integer = x[0]
		  while (i < x.length) do
			if (x[i] > max) 
				max = x[i]
			i = i + 1
		  end
		  return max
        end else do
            error "Cannot compute max out of empty array\n"
            return 0           
        end
	end

	//Time and length windows can be defined to aggregate a set of events
	//Note: windows should be defined at the very end, after the filters (if any)
	//For time windows. two parameters should be specified:
	//   - timeSpan, the "size"/duration of the window
	//   - timeShift, which creates a new output every timeShift milliseconds
    stream lengthW from e : intPort?m2::during 5000 by 5000
    select var avg : Float = average(e.x[]), 
    	var min : Integer =  min(e.x[]), 
    	var max : Integer = max(e.x[])
    produce intPort!res2(avg, min, max)
    
    
    //Length windows take one or two parameters
    //    - size (mandatory)
    //    - step (optional, by default equals to size i.e. no overlap between windows)
    stream lengthW from e : intPort?m1::buffer 5 by 5
    select var avg : Float = average(e.x[]), 
    	var min : Integer =  min(e.x[]), 
    	var max : Integer = max(e.x[])
    produce intPort!res(avg, min, max)



    statechart testSimpleFilter init Init {
        readonly property duration : Integer = 250
        property i : Integer = 0
    
        state Init {
            on entry do
                intPort!m1(1)                
                intPort!m1(2)                             
                intPort!m1(0)                
                intPort!m1(-1)
                intPort!m1(-2)                
                
                intPort!m1(2)                
                intPort!m1(4)                             
                intPort!m1(0)                
                intPort!m1(2)
                intPort!m1(2)                               
            end
            
            internal 
            event e: intPort?res
            action do            	
	       		print "res(" + e.avg + ", " + e.min + ", " + e.max + ")\n"
            end            
        }
        
        region time init Init {
        
        	state Init {
        		on entry do
        			timer!timer_start(duration)        			
        		end
        		
        		transition -> Init
        		event timer?timer_timeout
        		action do
        			intPort!m2(i)
        			i = i + 1
        		end
        		
        		internal 
            	event e: intPort?res2
            	action do            	
	       			print "res2(" + e.avg + ", " + e.min + ", " + e.max + ")\n"
            	end
        	}        
        }
    }


}
