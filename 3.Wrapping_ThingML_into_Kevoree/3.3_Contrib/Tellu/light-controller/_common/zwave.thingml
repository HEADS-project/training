import "datatypes.thingml"


thing fragment ZWaveMsgs
{
	message driverReady  (homeId : String);
	message driverFailed  ();
	message nodeAdded  (nodeid : String);
	message valueAdded  (nodeid : String, comclass : String, value : String);
	message valueChanged  (nodeid : String, comclass : String, value : String);
	message valueRemoved  (nodeid : String, comclass : String, value : Integer);
	message nodeReady  (nodeid : String, nodeinfo : String);
	message pollingEnabled  (nodeId : String);
	message pollingDisabled  (nodeId : String);
	message notification  (nodeId : String, msg : String);
	message controllerCommand  (st : String, err : String);
	message scanComplete ();
	message connect ();
	message disconnect ();
	message setValue (nodeid : String, commandclass : Integer, inst : Integer, index : Integer, value : Boolean);
	message setLevel (nodeid : String);
	message setNodeOn (nodeid : String);
	message setNodeOff (nodeid : String);
	message setLocation(nodeid : String, location : String); 
	message setName(nodeid : Integer, name : String);    
	message hardReset();
	message softReset();    
	message beginControllerCommand(cmdName : String, highPower : Boolean, node1_id : String, node2_id : String);
	message cancelControllerCommand();
	message query();
	message queryRes(res : String);
		
}

thing fragment ZWaveClient includes ZWaveMsgs
{   
	required port ZWave @sync_send "true"
    {
		sends connect, disconnect, setValue, setLevel, setNodeOn, setNodeOff, setLocation, setName, hardReset, softReset, beginControllerCommand, cancelControllerCommand, query
		receives driverReady, driverFailed, nodeAdded, valueAdded, valueChanged, valueRemoved, nodeReady, pollingEnabled, pollingDisabled, notification, controllerCommand, scanComplete, queryRes
	}
}

thing fragment ZWaveServer includes ZWaveMsgs
{   
	provided port ZWave 
    {
		receives connect, disconnect, setValue, setLevel, setNodeOn, setNodeOff, setLocation, setName, hardReset, softReset, beginControllerCommand, cancelControllerCommand, query
		sends driverReady, driverFailed, nodeAdded, valueAdded, valueChanged, valueRemoved, nodeReady, pollingEnabled, pollingDisabled, notification, controllerCommand, scanComplete, queryRes
	}
}

thing fragment ZWaveInternal includes ZWaveMsgs
{   
	provided port ZWaveInt 
    {
		sends driverReady, driverFailed, nodeAdded, valueAdded, valueChanged, valueRemoved, nodeReady, pollingEnabled, pollingDisabled, notification, controllerCommand, scanComplete
	}
	
	required port ZWaveIntRec 
    {
		receives driverReady, driverFailed, nodeAdded, valueAdded, valueChanged, valueRemoved, nodeReady, pollingEnabled, pollingDisabled, notification, controllerCommand, scanComplete
	}
}