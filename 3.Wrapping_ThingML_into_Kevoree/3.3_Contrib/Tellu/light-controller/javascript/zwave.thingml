import "../_common/zwave.thingml"


	object ZWave
    @js_type "var";
    
    object Nodes
    @js_type "var";

thing ZWave includes ZWaveServer, ZWaveInternal
@platform "javascript"
{

	function initialize() do
	    'var OpenZWave = require(\'openzwave-shared\');'
	    & zwave &' = new OpenZWave(\'/dev/ttyUSB0\', {
    		saveconfig: true,
		});'
		& zwave &'.on(\'driver ready\', function(homeid) {
	        console.log(\'scanning homeid=0x%s...\', homeid.toString(16));'
	        &zHomeId&'=homeid;'
	        &nodes&'=[];'
	        ZWaveInt!driverReady(zHomeId)
        '}.bind(this));'
        & zwave &'.on(\'driver failed\', function() {
	        console.log(\'failed to start driver\');'
	        ZWaveInt!driverFailed()             
        '}.bind(this));'
        & zwave &'.on(\'node added\', function(nodeid) {
        ' & nodes & '[nodeid] = {
	        manufacturer: \'\',
	        manufacturerid: \'\',
	        product: \'\',
	        producttype: \'\',
	        productid: \'\',
	        type: \'\',
	        name: \'\',
	        loc: \'\',
	        classes: {},
	        ready: false,
	        };'
	        ZWaveInt!nodeAdded('nodeid')
        '}.bind(this));
        '
        & zwave &'.on(\'value added\', function(nodeid, comclass, value) {
    	if (!' & nodes & '[nodeid][\'classes\'][comclass])
        	' & nodes & '[nodeid][\'classes\'][comclass] = {};
    	' & nodes & '[nodeid][\'classes\'][comclass][value.index] = value;'
    	ZWaveInt!valueAdded('nodeid', 'comclass', 'value')
		'}.bind(this));
        '
        & zwave &'.on(\'value changed\', function(nodeid, comclass, value) {
        if (' & nodes & '[nodeid][\'ready\']) {
        	console.log(\'node%d: changed: %d:%s:%s->%s\', nodeid, comclass,
        	value[\'label\'],
            ' & nodes & '[nodeid][\'classes\'][comclass][value.index][\'value\'],
            value[\'value\']);
         }
    	' & nodes & '[nodeid][\'classes\'][comclass][value.index] = value;'
    	ZWaveInt!valueChanged('nodeid', 'comclass', 'value')
		'}.bind(this));'
        
        & zwave &'.on(\'node ready\', function(nodeid, nodeinfo) {
	    ' & nodes & '[nodeid][\'manufacturer\'] = nodeinfo.manufacturer;
	    ' & nodes & '[nodeid][\'manufacturerid\'] = nodeinfo.manufacturerid;
	    ' & nodes & '[nodeid][\'product\'] = nodeinfo.product;
	    ' & nodes & '[nodeid][\'producttype\'] = nodeinfo.producttype;
	    ' & nodes & '[nodeid][\'productid\'] = nodeinfo.productid;
	    ' & nodes & '[nodeid][\'type\'] = nodeinfo.type;
	    ' & nodes & '[nodeid][\'name\'] = nodeinfo.name;
	    ' & nodes & '[nodeid][\'loc\'] = nodeinfo.loc;
	    ' & nodes & '[nodeid][\'ready\'] = true;
	    console.log(\'node%d: %s, %s\', nodeid,
	            nodeinfo.manufacturer ? nodeinfo.manufacturer
	                      : \'id=\' + nodeinfo.manufacturerid,
	            nodeinfo.product ? nodeinfo.product
	                     : \'product=\' + nodeinfo.productid +
	                       \', type=\' + nodeinfo.producttype);
	    console.log(\'node%d: name="%s", type="%s", location="%s"\', nodeid,
	            nodeinfo.name,
	            nodeinfo.type,
	            nodeinfo.loc);
	    for (comclass in ' & nodes & '[nodeid][\'classes\']) {
	        switch (comclass) {
	        case 0x25: // COMMAND_CLASS_SWITCH_BINARY
	        case 0x26: // COMMAND_CLASS_SWITCH_MULTILEVEL
	            zwave.enablePoll(nodeid, comclass);
	            break;
	        }
	        var values = ' & nodes & '[nodeid][\'classes\'][comclass];
	        console.log(\'node%d: class %d\', nodeid, comclass);
	        for (idx in values)
	            console.log(\'node%d:   %s=%s\', nodeid, values[idx][\'label\'], values[idx][\'value\']);
	    }'
	    ZWaveInt!nodeReady('nodeid',' nodeinfo')   
		'}.bind(this));'
		
		& zwave &'.on(\'scan complete\', function() {
	    	console.log(\'scan complete.\');'
			ZWaveInt!scanComplete()
		'}.bind(this));
		
		var notificationCodes = {
		    0: \'message complete\',
		    1: \'timeout\',
		    2: \'nop\',
		    3: \'node awake\',
		    4: \'node sleep\',
		    5: \'node dead (Undead Undead Undead)\',
		    6: \'node alive\',
		};'
		
		& zwave &'.on(\'notification\', function(nodeid, notif) {
		    console.log(\'node%d: %s\', nodeid, notificationCodes[notif]);'
		    ZWaveInt!notification('nodeid','notificationCodes[notif]')
		'}.bind(this));
				
		
		var ctrlState = {
		    0: \'No command in progress\',
		    1: \'The command is starting\',
		    2: \'The command was cancelled\',
		    3: \'Command invocation had error(s) and was aborted\',
		    4: \'Controller is waiting for a user action\',
		    5: \'Controller command is on a sleep queue wait for device\',
		    6: \'The controller is communicating with the other device to carry out the command\',
		    7: \'The command has completed successfully\',
		    8: \'The command has failed\',
		    9: \'The controller thinks the node is OK\',
		    10: \'The controller thinks the node has failed\',
		};
		var ctrlError = {
		    0: \'No error\',
		    1: \'ButtonNotFound\',
		    2: \'NodeNotFound\',
		    3: \'NotBridge\',
		    4: \'NotSUC\',
		    5: \'NotSecondary\',
		    6: \'NotPrimary\',
		    7: \'IsPrimary\',
		    8: \'NotFound\',
		    9: \'Busy\',
		    10: \'Failed\',
		    11: \'Disabled\',
		    12: \'Overflow\',
		}
		'
		
		& zwave &'.on(\'controller command\', function (state, error) {
    	console.log(\'controller command feedback: state:%d error:%d\', ctrlState[state], ctrlError[error]);'
    	ZWaveInt!controllerCommand('ctrlState[state]', 'ctrlError[error]')
		'}.bind(this));'
		
		
	end

	property zwave : ZWave
	property zHomeId : String
	property nodes : Nodes

	statechart ZwaveImpl init Idle {
		internal event m : ZWave?setValue
	        action do
	        ZWave!queryRes('JSON.stringify('& nodes &')')
	        end
		state Idle {
	        on entry do
	         	initialize()
	         	print("initialize ready")
	        end
	        
	        transition CONNECT -> Connecting
	        event m : ZWave?connect
	        action do
	            ''& zwave&'.connect();'
	        end
		}
		
		state Connecting {
			transition CONNECTED -> Connected
	        event m : ZWaveIntRec?driverReady
	        action do
	            ZWave!driverReady(zHomeId)
	        end
	        
	        transition FAILED -> End
	        event m : ZWaveIntRec?driverFailed
	        action do
	            ZWave!driverFailed()
	        end
		}
		
		state End {}
		
		
		state Connected {
		
			internal event m : ZWave?setValue
	        action do
	           'console.log(\'turning switch :%s\', '& m.value &');
        		'& zwave &'.setValue('& m.nodeid &','& m.commandclass &','& m.inst &','& m.index &','& m.value &');'   
	        end
	        
	        internal event m : ZWave?setNodeOn
	        action do
	           'console.log(\'set node on :%s\', '& m.nodeid &');
        		'& zwave &'.setNodeOn('& m.nodeid &');'   
	        end
	        
	        internal event m : ZWave?setNodeOff
	        action do
	           'console.log(\'set node off :%s\', '& m.nodeid &');
        		'& zwave &'.setNodeOff('& m.nodeid &');'   
	        end
		
	        internal event m : ZWaveIntRec?nodeReady
	        action do
	           ZWave!nodeReady(m.nodeid, m.nodeinfo)       
	        end
	        
	        internal event m : ZWaveIntRec?nodeAdded
	        action do
	           ZWave!nodeAdded(m.nodeid)       
	        end
	        
	        internal event m : ZWaveIntRec?valueAdded
	        action do
	           ZWave!valueAdded(m.nodeid, m.comclass, m.value)       
	        end
	        
	        internal event m : ZWaveIntRec?valueChanged
	        action do
	           ZWave!valueChanged(m.nodeid, m.comclass, m.value)       
	        end
	        
	        internal event m : ZWaveIntRec?notification
	        action do
	           ZWave!notification(m.nodeId ,m.msg)       
	        end
	        
	        internal event m : ZWaveIntRec?controllerCommand
	        action do
	           ZWave!controllerCommand(m.st ,m.err)       
	        end
	        
	        internal event m : ZWaveIntRec?scanComplete
	        action do
	           ZWave!scanComplete()       
	        end
	        
	        transition DISCONNECT -> End
	        event m : ZWave?disconnect
	        action do
	            ''& zwave&'.disconnect();'
	        end
	        
		}
	}
}


/*configuration ZWave {
	instance zwave : ZWave
	//instance zwavetest : ZwaveTest
	//connector zwavetest.ZWave => zwave.ZWave
	connector zwave.ZWaveIntRec => zwave.ZWaveInt
}*/

