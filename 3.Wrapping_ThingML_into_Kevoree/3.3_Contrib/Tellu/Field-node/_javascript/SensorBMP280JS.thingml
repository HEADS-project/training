import "../Sensor.thingml"
import "../Properties.thingml"
import "Filter.thingml"

object Analog
    @js_type "var";

thing SensorJS includes Sensor, Filter, Properties
@pim "Sensor"
@platform "javascript"
@javascript "node browser"
{

    function initialize() 
    if (test==true)
    do
    	'console.log(\'initialize\');'
    	&vals &'=[]'
    end 
    else
    do
         ''& bmp280 &' =  require(\'bmp280\');
         '& bmp280 &'.init('& bmp280 &');'
         
         & vals &' = [];'
         
    end
       
    function calculateStart() : Integer
    do
    	'var time = new Date().getTime();
    	var delay = Math.round('& setPeriod & ' - time %' & setPeriod &');
    	console.log("Set start: "+ delay.toString());
    	return  delay'
    end
    
    function calculateDelay() : Integer
    do
    	'var time = new Date().getTime();
    	var delay = Math.round(' & samplePeriod & ' - time %' & samplePeriod &');
    	if('& samplePeriod &'/2 > delay ) {
    		delay = delay + '& samplePeriod &';
    	}
    	//console.log("Sample start: "+ delay.toString()) 
    	return delay'
    end
    
    function read() : Integer
	if (test==true)
	do
	    	print "read"
	    	if(testval < 10) do
	    		testval = testval + 1 
	    		return 0
	    	end else do
	    		return 1
	    	end
	    	
	end
	else   
    do
    	'var temp = '&bmp280&'.readTemperatureData('&bmp280&');
    	'&tempValue&' = temp.temp;
    	pressure = '&bmp280&'.readPressureData('&bmp280&',temp.tempFine);'
    	     
        return 'pressure'
    end
    
        
    
    /*
 	{"data" :
                {"pressure":[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
                "temperature":21.2,
                "sample_set":14,
                "sensor_id":"IsensU 1"
                },
	"status" :                           
                {"fn_id":"FN 1",
                "bt_rssi": -41,
                "last_resync": 7
                }
	}
	*/
   
    
    function append(pressure : Integer, temperature : Integer) : String
    do
    	
    	''&vals&'.push('&pressure&')
    	if ('&vals&'.length == Math.round('& setPeriod/samplePeriod &')){
    		let tempDiff = 0;
    		if('&curTempValue&' != 100000){
    			tempDiff = '&temperature&' -'&curTempValue&';
    		}
    		'&curTempValue&' = '&temperature&'
    		var data = {}
    	    data.pressure = '&vals&'
    	    data.temperature = tempDiff
    	    var time = new Date().getTime()+'&setPeriod&'/2;
    	    data.sample_set = Math.floor((time/'&setPeriod&')%256);
    	    data.sensor_id = "0x0b";
    	    
    	    var status = {};
    	    status.fn_id = '&nodeName&';
    	    status.bt_rssi = 0;
    	    status.last_resync = 0;
    	    var metering = {};
    	    metering.data = data;
    	    metering.status = status;
    	        	   
    		var res = JSON.stringify(metering);
    		'&vals&' = []
    		return res;
    	} else {
    		return "";
    	}
    	'
    end
    
    function addTopic(str : String) : String
    do
    	'var metering = JSON.parse('&str&');
		var json = {};
		if(metering.fall_index != null) {
			json.topic="sensor/fallIndex";
		} else {
	    	json.topic="sensor/metering";
	    }
	    json.message=JSON.stringify(metering);
		var res = JSON.stringify(json);
		return res'
    end
    
    function printSendPeriod()
    do
	    'var now = new Date().getTime();
	    if ('& lastSend &' != 0){
	    	var diff = now-'&lastSend&';
	    	'&lastSend&'= now;
	    	console.log("Diff send: "+ diff.toString());
	    } else {
			'&lastSend&'= now;
		}'		
	end
    	
	function printReadPeriod()
    do
	    'var now = new Date().getTime();
	    if ('&lastRead&' != 0){
	    	var diff = now-'&lastRead&';
	    	'&lastRead&'= now;
	    	console.log("Diff read: "+ diff.toString())
	    } else {
			'&lastRead&'= now;	
		}'
	end
    
    property test : Boolean = false
    property testval : Integer = 0
    property lastSend : Integer = 0
    property lastRead : Integer = 0
    property setPeriod : Integer = 1800
    property samplePeriod : Integer = 200
    property value : Integer = 0
    property tempValue : Integer = 0
    property curTempValue : Integer = 100000
    property msg : String
    property bus : Analog
    property temp : Analog
    property bmp280 : Analog
    property vals : Analog
    
    statechart SensorMachine init Idle {

		state Idle {
			on entry do 
				initialize()
				print "Pressure Sensor Ready"				
				timer!timer_start(calculateStart())
			end
			
			transition READING -> Reading
			event timer?timer_timeout
			
		}
		state Reading {
			on entry do 
			    timer!timer_start(calculateDelay())
				print "Sensor Reading"
				value = read()
				msg = append(value, tempValue)
				if (not (msg == ""))
				do
					decoder!decoded(msg)
					sensor_mqtt!readingJson(addTopic(msg))
				end
			end
			
			internal event timer?timer_timeout
			action do				
				value = read()
				//printReadPeriod()
				msg = append(value, tempValue)
				if (not (msg == ""))
				do
					decoder!decoded(msg)
					sensor_mqtt!readingJson(addTopic(msg))
					
					//printSendPeriod()
					timer!timer_start(calculateStart())
				end
				else
				do
					timer!timer_start(calculateDelay())
				end
			end
			
			internal event e : filtered?decoded
			action do
				print("\n MQTT: "+addTopic(e.msg))
				sensor_mqtt!readingJson(addTopic(e.msg))
			end
			
			//internal event sensor_service?read
			//action do
			//	value = read()
			//	sensor_service!reading(value)
			//end		
			
			//internal event t : sensor_service?start_periodic_reading
			//action do
			//	delay = t.delay
			//	timer!timer_cancel()
			//	timer!timer_start(delay)
			//end
			
			//internal event sensor_service?reading_cancel
			//action timer!timer_cancel()
		}
	}
}
