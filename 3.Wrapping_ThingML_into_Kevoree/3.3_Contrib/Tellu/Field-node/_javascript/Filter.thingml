import "Decoder.thingml"
import "../Filter.thingml"
import "../datatypes.thingml"



thing Filter includes DecoderMsg{

    message outputMsg(comp : Double);
	message tmpMsg(pressure: Double, temp: Double, comp: Double);
	message splitMsg(pressure: Double, temp: Double);

	function filterComp(pressure : Double[], temp : Double[], comp : Double[]) : Double do
	
	
	//y = ay-1 + by-2 + cx-1 + dx-2
	
		/*
 	{"data" :
                {"pressure":[0, 1, 2, 3, 4, 5, 6, 7, 8],
                "temperature":21.2,
                "sample_set":14,
                "sensor_id":"IsensU 1"
                },
	"status" :                           
                {"fn_id":"FN 1",
                "bt_rssi": -41,
                "last_resync": 7
                }
	}
	*/
	
	'
	
	var a = 1.994315;
	var b = -0.9943162;
	var c = 0.0973;
	var d = -0.0973;
	var coeff = 1;
	
	var presCoeff = 0.03051758;
	
	var comp = coeff* (a*'&comp&'[i-1] + b*'&comp&'[i-2] + c*'&temp&'[i-1]);
	var pressure = pressure - comp;
	
	return pressure;
	'
	end
	
	
	function filterCompResurrect(pressure: Double, temp: Double) : String 
	do
		'
		'&reading&'.data.pressure['&index&'] = pressure[0]
		'&index&'++
		if('&index&' == 8){
			return JSON.stringify('& reading & ')
		} else {
			return ''
		}'
	end
		
	function splitAndSendToStream(msg: String)  
	do
		'
		var json = JSON.parse('&msg&');
		'&reading&'= json
		'&index&' = 0
		var temperature = json.data.temperature/9;
		var pressure = json.data.pressure; 
		
		for (var i = 0; i < pressure.length; i++) {
		 	'output!splitMsg('pressure[i]','temperature')'
		}'
	end
	
	
	stream compansation  
		//from e : [e1 : output?splitMsg & e2 @UseOnce "False" @TTL "7000": output?outputMsg -> tmpMsg(e1.pressure, e1.temp, e2.comp)]::buffer 3 by 1
from e : [e1 : output?splitMsg & e2 : output?outputMsg -> tmpMsg(e1.pressure, e1.temp, e2.comp)]::buffer 3 by 1
		select var compensation : Double = filterComp(e.pressure[], e.temp[], e.comp[]),
			var pressure : Double[] = e.pressure[],
			var temperature : Double[] = e.temp
		produce output!tmpMsg(pressure, temperature, compensation)
	
	
	
	//variable to store the incoming reading
	property reading : String
	//variable to store the temperature compensated reading
	property compensated : String
	//An index variable used to keep track of number of compensated pressure readings
	property index : Integer = 0
	
	statechart Filter init Active @debug "false" {
	
		state Active {
			on entry do
				print "Filter Ready"
				//Initialising loopback of stream with 0
				output!outputMsg(0)				
			end
			
			internal event e: decoder?decoded
			action do
				//This component receives a json formatted message. The splitAndSend method formats this into a "ThingML" message with parameters before sending to the stream
				splitAndSendToStream(e.msg)
			end
			
			internal event e: output?tmpMsg
			action do
				//stream loopback
				output!outputMsg(e.comp)
				
				//Resurrect json structure
				compensated = filterCompResurrect(e.pressure, e.temp)
				//Send compensated reading when 9 compensated pressure readings are added to report 
				if(not(compensated == "")) do
					filtered!decoded(compensated)
					//print("----------------------\n")
					//print(getJson(compensated))
					//print("----------------------\n")
				end
			end
		}
	}
	
	
	internal port output {
		sends outputMsg, tmpMsg, splitMsg
		receives outputMsg, tmpMsg, splitMsg
	}
	
	required port decoder {
		receives decoded
	}
	
	provided port filtered {
		sends decoded
	}

}
/*configuration Filter {
	instance pfilter : Filter

}*/




