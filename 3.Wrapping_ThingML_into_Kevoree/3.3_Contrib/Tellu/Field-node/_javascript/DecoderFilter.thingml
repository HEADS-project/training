import "Decoder.thingml"
import "../Filter.thingml"
import "../datatypes.thingml"



thing DecoderFilter includes DecoderMsg{

	
	function initialize() do
		''&inputs&'={};'
	end

	function filterComp(msg : String) : Map do
	
	//parse sensor_id ut av msg
	//finne riktig array som har sensor_id som key
	//ekstraher temperatur for hver av msg
	//gjør kalkulasjonen 
	//returner kompenserte verdier og kompensasjons verdi i en kombinert map
	
	//y = ay-1 + by-2 + cx-1 + dx-2
	
		/*
 	{"data" :
                {"pressure":[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
                "temperature":21.2,
                "sample_set":14,
                "sensor_id":"IsensU 1"
                },
	"status" :                           
                {"fn_id":"FN 1",
                "bt_rssi": -41,
                "last_resync": 7
                }
	}
	*/
	
	'
	
	var a = 1.994315;
	var b = -0.9943162;
	var c = 0.0973;
	var d = -0.0973;
	var coeff = 1;
	
	var presCoeff = 0.03051758;
	
	var json = JSON.parse('&msg&');
	
	var sensorId = json.data.sensor_id;
	var meterings = '&inputs&'[sensorId];
	if(!meterings){
		meterings = [];
		for (let i = 0; i < 11; i++) {
			meterings[i] = {};
			meterings[i].comp = 0;
			meterings[i].temperature = json.data.temperature/9;
		}
		'&inputs&'[sensorId] = meterings;
	}
	
	meterings[1].comp = meterings[10].comp;
	meterings[1].temperature = meterings[10].temperature;
	meterings[0].comp = meterings[9].comp;
	meterings[0].temperature = meterings[9].temperature;
	
	var inc = (json.data.temperature)/9;
	for (let i = 2; i < meterings.length; i++) {
		meterings[i].temperature = inc;
	}
	
	var pressure = json.data.pressure;
	
	for (let i = 0; i < pressure.length; i++) {
		var comp = coeff* (a*meterings[i+1].comp + b*meterings[i].comp + c*meterings[i+1].temperature);
 	 	pressure[i] = presCoeff*pressure[i]-comp;
 	 	meterings[i+2].comp=comp
 	 	//console.log("Comp: "+ comp);
		//console.log("Temp: " + meterings[i].temperature);
 	}

	return json;
	'
	end
	
		
	function getJson(msg: Map) : String 
	do
		'return JSON.stringify('& msg & ')'
	end
	
	
	property inputs : Map
	property compensated : Map
	
	statechart DecoderFilter init Active @debug "false" {
	
		state Active {
			on entry do
				initialize()
				print "Filter Ready"
			end
			
			
			internal event e: decoder?decoded
			action do
				compensated = filterComp(e.msg)
				if(not(compensated == "")) do
					filtered!decoded(getJson(compensated))
					//print("----------------------\n")
					//print(getJson(compensated))
					//print("----------------------\n")
				end
			end
		}
	}
	
	required port decoder {
		receives decoded
	}
	
	provided port filtered {
		sends decoded
	}

}



