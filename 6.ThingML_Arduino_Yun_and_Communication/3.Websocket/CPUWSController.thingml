/*
 * File: CPUFWSController.thingml
 * 
 * Description: This is an example of websocket communication. It allows to remote control the LED
 * 				It should be used with MCUButtonAndLEDController deployed on the Yun's MCU
 *
 * TODO: Compile this ThingML into posix compatible code, and cross compile it with the arduino-yun-cross-compiler
 * 		 docker container, then upload the executable on the Yun (CPU side) and run it.
*/


import "Msgs.thingml"
import "../lib/_Datatypes.thingml"

protocol Serial
	@trace_level "3"
	@serial_path_to_device "/dev/ttyATH0"
	@serial_baudrate "115200"
;

protocol Websocket
        @serializer "PosixJSONSerializerPlugin"
	@trace_level "3"
;

configuration CPUWSControllerCfg
@c_compiler "/openwrt-yun/staging_dir/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-gcc"
@add_c_libraries "websockets"
@add_c_libraries "ssl"
@add_c_libraries "crypto"
@add_c_libraries "z"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/lib"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/lib"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/include"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/include"
{
	instance bc : ButtonController
	
	connector bc.LEDport over Serial
	
	connector bc.WS over Websocket
}

thing ButtonController includes Msgs
{
	
	required port LEDport {
		receives LEDON, LEDOFF
		sends LEDON, LEDOFF
	}
	
	required port WS {
		receives LEDON, LEDOFF
		sends LEDON, LEDOFF
	}
	
	statechart LEDControllerChart init Init {
		state Init {
			on entry do
				'printf("[CPU] Init\n");'
			end
			transition -> Running
		}
		
		state Running {
			internal event LEDport?LEDON action do
				LEDport!LEDON()
				WS!LEDON()
				'printf("[CPU] LEDON\n");'
			end
			internal event LEDport?LEDOFF action do
				LEDport!LEDOFF()
				WS!LEDOFF()
				'printf("[CPU] LEDOFF\n");'
			end
			internal event WS?LEDON action do
				LEDport!LEDON()
				'printf("[CPU] WS LEDON\n");'
			end
			internal event WS?LEDOFF action do
				LEDport!LEDOFF()
				'printf("[CPU] WS LEDOFF\n");'
			end
		}
	}
}

