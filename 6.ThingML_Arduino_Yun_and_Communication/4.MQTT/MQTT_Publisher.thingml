/*
 * File: MQTT_Publisher.thingml
 * 
 * Description: This application publish on the ThingML topic the status of the LED
 * 
 *
 * TODO: Compile this ThingML into posix compatible code, and cross compile it with the arduino-yun-cross-compiler
 * 		 docker container, then upload the executable on the Yun (CPU side) and run it.
*/

import "../lib/_Datatypes.thingml"

protocol Serial
	@serial_path_to_device "/dev/ttyATH0"
	@serial_baudrate "115200"
;

protocol MQTT
        @serializer "PosixJSONSerializerPlugin"
	@mqtt_broker_address "192.168.1.127"
	@mqtt_topic "ThingML"
;

configuration MQTTPublisherCfg
@c_compiler "/openwrt-yun/staging_dir/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-gcc"
@add_c_libraries "mosquitto"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/lib"
@add_c_libraries_rep "/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/lib"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/usr/include"
@add_c_flags "-I/openwrt-yun/staging_dir/target-mips_r2_uClibc-0.9.33.2/include"
{
	instance bc : ButtonController
	
	connector bc.LEDport over Serial
	
	connector bc.mqttport over MQTT
}

thing fragment Msgs {
	message LEDON() @code "66";
	message LEDOFF() @code "67";
}

thing fragment WSMsgs {
	message LEDisON() @code "101";
	message LEDisOFF() @code "102";
}

thing ButtonController includes Msgs, WSMsgs
{
	
	required port LEDport {
		receives LEDON, LEDOFF
		sends LEDON, LEDOFF
	}
	
	required port mqttport {
		sends LEDisON, LEDisOFF
	}
	
	statechart LEDControllerChart init Init {
		state Init {
			on entry do
				'printf("[CPU] Init\n");'
			end
			transition -> Running
		}
		
		state Running {
			internal event LEDport?LEDON action do
				LEDport!LEDON()
				mqttport!LEDisON()
				'printf("[CPU] LEDON\n");'
			end
			internal event LEDport?LEDOFF action do
				LEDport!LEDOFF()
				mqttport!LEDisOFF()
				'printf("[CPU] LEDOFF\n");'
			end
		}
	}
}

