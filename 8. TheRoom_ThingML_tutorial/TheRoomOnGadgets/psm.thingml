/* This is the PSM the Platform Specific Model */
/*** This version contains a SIMULATED platform */
/* This version has possibility to change the polling intervals for temperature */
import "datatypes.thingml"
import "pim_messages.thingml"
import "psm_datatypes.thingml"
import "javatimer.thingml" // 160310

// PSM specific messages

thing fragment PSM_Msg {
	message initialize(ts:Tellstick);
}

// Here we relate to the given jstick library and kick-down to it from ThingML

thing fragment PSMSensor {
	/* required port provide_val {} // TODO This does not work as override
	provided port require_val {} */
}

thing fragment PSMSensorSet includes PSMSensor {
property sensors: Integer
}

thing fragment PSMSensorSingle includes PSMSensorSet {
}


// We need a way to initialize the Tellstick etc
// This defines the central kick-down concept. The maven_dep stuff refers to an installed Maven project
thing TellstickManager includes PSM_Msg, GeneralMsg
@maven_dep "<dependency>
<groupId>net.juppi</groupId>
<artifactId>jstick-api</artifactId>
<version>1.6</version>
</dependency>"
{ 	/* Ports may be defined here */
	required port to_T1 {
		sends initialize
	}
	
	required port to_onoff1 {
		sends initialize
	}

	required port to_gdg {
		sends sensorinfo, deviceinfo
	}
	
	/* properties defined here */
	property ts : Tellstick // this is set in initialize() function
	property sensor_list:Sensor[25] // removed at SIMULATION
	property device_list:Device[25] // removed at SIMULATION
	property i:Integer // runner index in list of sensors or devices
	property s:Sensor // temporary Sensor removed at SIMULATION
	property d:Device // temporary Device removed at SIMULATION
	property model:String
	property proto:String
	property sid:Integer // sensor id
	property did:Integer // device id
	property dataTypes:Integer
	property temperature:Double
	property humidity:Long
	property timeStamp:Long
	property name:String
	property devicetype:String
	property devicemethods:Long
	property devicelastcmd:String
	property devicelastval:Long
	
	function observe_sensors() do
		// Now we send to PIM all the Sensor gadgets which are managed by that Tellstick
		''&sensor_list& '=' ''&ts&'.getSensors().toArray('''&sensor_list& ');' // kick-down to tellstick
		i=0
		while (i<25)do
			s=sensor_list[i]
			if (not (s=='null')) // TODO find a way in ThingML to check existence?
			do
				model=''&s&'.getModel()'
				proto=''&s&'.getProtocol()'
				sid=''&s&'.getId()'
				dataTypes=''&s&'.getDataTypes()'
				temperature=''&s&'.getTemperature()'
				humidity=''&s&'.getHumidity()'
				timeStamp=''&s&'.getTimeStamp()'		
				to_gdg!sensorinfo(model,proto,sid,dataTypes,temperature,humidity,timeStamp)
			end
			i=i+1
		end
	end
	
	function observe_devices() do
		// Now we send to PIM all the Devices actuators which are managed by that Tellstick
		''&device_list& '=' ''&ts&'.getDevices().toArray('''&device_list& ');' // kick-down to tellstick
		i=0
		while (i<25) do
			d=device_list[i]
			if (not (d=='null')) // TODO not very elegant way to walk through, should use numberofdevices
			do
				did = ''&d&'.getId()'
				name = ''&d&'.getName()'
				model= ''&d&'.getModel()'
				proto = ''&d&'.getProto()'
				devicetype = ''&d&'.getType()'
				devicemethods = ''&d&'.getMethods()'
				devicelastcmd = ''&d&'.getLastCmd()'
				devicelastval = ''&d&'.getLastValue()'
				to_gdg!deviceinfo(did,name,model,proto,devicetype,devicemethods,devicelastcmd,devicelastval)
			end
			i=i+1
		end
	end

	function initialize() do
	// kick-down initialization
		ts = 'new net.jstick.api.Tellstick()' // NOTE: Full name of the kick-down class

		to_T1!initialize(ts)
		to_onoff1!initialize(ts)
		
		observe_sensors()
		observe_devices()
		
		// Now we send to PIM all the Device i.e. actuator gadgets that exist in the system
		
	end //initialize
	
	statechart TellstickBehavior init Init {
		state Init {
		on entry do 
			initialize()
			
		end }
	}
}

thing ThermometerSet includes PSMSensorSet,TemperatureMsg, GeneralMsg, PSM_Msg, TimerClient {
// TimerClient introduced 160310
	required port provide_val {sends temperature}
	required port show_values {sends temperature}
	provided port require_val {receives add_thermometer}
	provided port initial {receives initialize}
	
	property ts:Tellstick // kick-down 
	
	property thermometers:Integer[25] // Identifiers of the thermometers in the set
	property thermotext:String[25] // corresponding explanatory text 
	property last_thermo:Integer = 0 // number of thermometers in the set 
	property i:Integer // runner index in list
	property poll_intrvl:Integer = 10000 // polling interval in milliseconds, default is like hardcoded value from X2.sim
	property s:Sensor // runner Sensor 
	property id_s:Long // temporary id value (to be used with kick-down)
	property sensortype:Integer // temporary value for sensor type
	property temp_s:Double // temporary temperature value
	property found:Boolean // temporary - true when item found in loop
	
	statechart behaviorThermometerSet init Init {
		state Init {
			transition -> Idle
			event temp: initial?initialize
			action do
				ts = temp.ts
				timer!timer_start(poll_intrvl) // starting the polling cycle
			end
		}
		state Idle {
		transition -> Idle
			event timout:timer?timer_timeout // 160310
			action do
				i=0
				while (i<last_thermo)do
					id_s=thermometers[i]
					s= ''&ts&'.getSensor('&id_s& ')' 
					if (not (s=='null')) // TODO find a way in ThingML to check existence?
					do
						sensortype=''&s&'.getDataTypes()'
						if (sensortype==1 or sensortype==3) do
							temp_s=''&s&'.getTemperature()'			
							provide_val!temperature(id_s,thermotext[i],temp_s)
						end
					end
					i=i+1
				end 
				
				timer!timer_start(poll_intrvl) // restarting the polling cycle
			end
			transition -> Idle
			event addt:require_val?add_thermometer
			action do				
				id_s=addt.id
				s= ''&ts&'.getSensor('&id_s& ')'
				sensortype=''&s&'.getDataTypes()'
				if (sensortype==1 or sensortype==3) do
					thermometers[last_thermo]=id_s
					thermotext[last_thermo]=addt.txt
					last_thermo = last_thermo+1
				end
			end
		}
	}
} // ThermometerSet



thing OnOffSet includes PSM_Msg, GeneralMsg, OnOffMsg{
	provided port require_val {receives SwitchOn, SwitchOff, add_device}
	provided port initial {receives initialize}
	required port show_val {sends SwitchOn, SwitchOff}
	
	property ts:Tellstick // kick-down 
	property onoffswitches:Integer[25] // Identifiers of the onoffswitches in the set
	property last_onoff:Integer = 0 // number of onoff switches in the set 
		
	property i:Integer // runner index in list
	property did:Integer // temporary device id
	property d:Device // temporary device 
	property mth:Long // temporary methods
	property found:Boolean // temporary boolean used in while loop
	property status:Long // of either ON or OFF not very reliable since no real result is returned
	
	statechart behaviorOnOffSet init Init {
		state Init {
			transition -> Idle
			event initial: initial?initialize
			action do
				ts = initial.ts
			end
		}
		state Idle {
			transition -> Idle
			event add_dev: require_val?add_device
			action do
				did=add_dev.did
				
				d= ''&ts&'.getDevice('&did& ')'
				mth =''&d&'.getMethods()'
				if (mth==3) do
					onoffswitches[last_onoff]=did
					last_onoff = last_onoff+1
				end
			end
			transition -> Idle
			event swon: require_val?SwitchOn
			action do
				did=swon.did
				i=0
				found = false
				while (i<last_onoff and (not found)) do
					if (did==onoffswitches[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					d= ''&ts&'.getDevice('&did& ')'
					if (not (d=='null')) do
						mth =''&d&'.getMethods()'
						if (mth==3) do
							'int dident='''&did&';'
							'int x= '&ts&'.sendCmd(dident,"ON");'
							status = 'x'
							// ''&status& '=' ''&ts&'.sendCmd(''' &did& ', "ON" );'  TODO does not compile,yet
							// status =''&ts&'.sendCmd('& did &', "ON" )'
						end
						// TODO We need an error outcome if it is the wrong type as well
					end
				end
			end
			transition -> Idle
			event swoff: require_val?SwitchOff
			action do
				did=swoff.did
				i=0
				found = false
				while (i<last_onoff and (not found)) do
					if (did==onoffswitches[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					d= ''&ts&'.getDevice('&did& ')'
					if (not (d=='null')) do
						mth =''&d&'.getMethods()'
						if (mth==3) do
							'int dident='''&did&';'
							'int x= '&ts&'.sendCmd(dident,"OFF");'
							status = 'x'
							// ''&status& '=' ''&ts&'.sendCmd(''' &did& ', "OFF" );'  TODO does not compile,yet
						end
						// TODO We need an error outcome if it is the wrong type as well
					end
				end
			end
			
		}
	}
}

//SIMULATION


thing GadgetSim includes GeneralMsg
@mock "true"
{	provided port show_gadgets {
		receives sensorinfo, deviceinfo
	}
}


