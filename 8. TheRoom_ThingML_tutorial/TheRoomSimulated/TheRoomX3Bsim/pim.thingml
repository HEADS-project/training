/* ThingML Framework */

// Base datatypes
import "datatypes.thingml"

// Import everything in core [where is core?]
// import "core/scheduler.thingml"
// import "core/timer.thingml"

/* PSM must be included */
import "psm_sim.thingml"
import "psm_datatypes_sim.thingml"
import "pim_messages.thingml"
import "timer.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg, TimerMsgs {
	provided port get_sensor {
		receives temperature
	}
	required port request_sensor {
		sends add_thermometer, set_polling_interval
	}
	required port request_actuator{
		sends add_device, SwitchOn, SwitchOff
	}
	provided port human_input {
		receives add_thermometer, add_device, SwitchOn, SwitchOff, set_temperature, set_polling_interval
	}
	required port human_output {
		sends temperature, prompt
	}
	
	//timer ports - it does not hold to include TimerClient since it only has one port and therefore cannot distinguish between two timers
	required port guard_temperature
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
	required port guard_human
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
	
	
	property tmrature:Double = 20 // the requested temperature for the room
	property thermo_id:Integer // the single thermometer identifier
	property switch_id:Integer // the single on-off switch identifier
	
	property lasttemp:Double = 0 // the last temperature recorded, buffering one measurement
	
	statechart PIM_behavior init Build {
		composite state Build init AddThermo keeps history {
		on entry guard_human!timer_start(30000) // 30s to do the whole build 
		on exit guard_human!timer_cancel()
			state AddThermo {
				transition -> AddDevice
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
					request_sensor!add_thermometer(thermo_id,addt.txt)
					human_output!prompt("Please add one switch device") // SIMULATION: prompting on console for the user to react properly
				end
				transition -> AddThermo // Cover other messages
				event human_input?add_device
				event human_input?SwitchOn
				event human_input?SwitchOff
				event human_input?set_temperature
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add thermometer")
				end
				// temperature is handled on Build level
			}
			state AddDevice {
				transition -> SetThermostat
				event adddev:human_input?add_device
				action do
					switch_id=adddev.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Please give thermostat temperature setting") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddDevice
				event human_input?SwitchOn
				event human_input?SwitchOff
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometer already added, add device")
				end
				// temperature and set_temperature handled on Build level
			}
			state SetThermostat {
				// Here the only message we want is the set_temperature, but this is on one level up to move to Running
				transition -> SetThermostat
				event human_input?add_thermometer
				event human_input?add_device
				event human_input?SwitchOn
				event human_input?SwitchOff
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
			}
			
			// Normal transition to the Running state
			transition -> Running
			event set_temp:human_input?set_temperature
			action do
				tmrature = set_temp.t
				human_output!prompt("Now entering thermostat. Please give temperature observations") // SIMULATION: prompting on console for the user to react properly
			end
			
			//Escape situations
			transition -> Build
			event get_sensor?temperature
			action do 
				// just discard, the thermostat is not running, yet (161103)
			end
				
			transition -> Build
			event tmout:guard_human?timer_timeout
			action do
				human_output!prompt("Please continue doing the build of the temperature control")
			end
			
		} // end Build
		
		composite state Running init Thermostat keeps history {
		
		
			composite state Thermostat init TemprDecide {  // notice that we are not keeping history, we do not know whether to turn on or off
				state TemprDecide {
				on entry guard_temperature!timer_start(15000)  // hardcoded 15s to get the next temperature 
				on exit guard_temperature!timer_cancel()
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard temp2.t>=tmrature-1  // We choose switch OFF as much as we can here
					action do
						request_actuator!SwitchOff(switch_id)
						lasttemp = temp2.t
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard temp2.t<tmrature-1
					action do
						request_actuator!SwitchOn(switch_id)
						lasttemp = temp2.t
					end
					
					transition -> TemprDecide
					event timout:guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprDecide - temperature measurement is delayed")
					end
				}
				
				state TemprIncrease{ // Invariant: Switch is ON and temperature should increase
				on entry guard_temperature!timer_start(15000)
				on exit guard_temperature!timer_cancel()
				
					transition -> TemprIncrease 
					event temp:get_sensor?temperature
					guard temp.t<=tmrature+1
					action do
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
						if (lasttemp>temp.t) request_actuator!SwitchOn(switch_id) // the temperature is still falling even though switch should be ON, reactivate
						lasttemp = temp.t
					end
					
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard temp2.t>tmrature+1 
					action do
						request_actuator!SwitchOff(switch_id)
						lasttemp = temp2.t
					end
					
					transition -> TemprIncrease
					event timout:guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprIncrease - temperature measurement is delayed")						
					end
				}

				state TemprDecrease{ // Invariant: Switch is OFF and temperature should decrease
				on entry guard_temperature!timer_start(15000) 
				on exit guard_temperature!timer_cancel()
				
					transition-> TemprDecrease
					event temp:get_sensor?temperature
					guard temp.t>=tmrature-1
					action do
						// TRACING to follow thermostat print("TempDecrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
						if (lasttemp<temp.t) request_actuator!SwitchOff(switch_id) // the temperature is still rising even though switch should be OFF, reactivate
						lasttemp = temp.t
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard temp2.t<tmrature-1
					action do
						request_actuator!SwitchOn(switch_id)
						lasttemp = temp2.t
					end
					
					transition -> TemprDecrease
					event timout:guard_temperature?timer_timeout
					action do
						human_output!prompt("WARNING: @TemprDecrease - temperature measurement is delayed")
					end
				}

				
				transition -> On
				event swon:human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end 
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end 
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
			} // end Thermostat
			
			state On {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> On
				event temp:get_sensor?temperature
				action do
					if (lasttemp>temp.t) request_actuator!SwitchOn(switch_id) // temperature is falling even when ON. Reactivate.
					lasttemp = temp.t
				end
			}
			state Off {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					request_actuator!SwitchOff(swoff.did)
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
					request_actuator!SwitchOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end	
				transition -> Off
				event temp:get_sensor?temperature
				action do
					if (lasttemp<temp.t) request_actuator!SwitchOff(switch_id) // temperature is rising even when OFF. Reactivate.
					lasttemp = temp.t
				end
			}
			
			// Transitions of the composite state Running
			transition -> Running
			event pollint:human_input?set_polling_interval
			action do
				// just forward the polling interval instructions to the PSM
				request_sensor!set_polling_interval(pollint.intrvl)
			end
			
			// Messages that should not occur
			transition -> Running
			event human_input?add_thermometer
			event human_input?add_device
			action do
				human_output!prompt("Adding gadgets has been done and then blocked")
			end			
			// Messages the cannot occur - since they are always handled
			transition -> Running
			event human_input?SwitchOn
			event human_input?SwitchOff
			event human_input?set_temperature
			action do
				human_output!prompt("INTERNAL ERROR: Impossible messages at PIM.Running")
			end		
			transition -> Running
			event temp:get_sensor?temperature
			action do
				human_output!prompt("INTERNAL ERROR: temperature received at PIM.Running")
				lasttemp = temp.t
			end
		} // end Running
	} // end PIM_behavior
} // end PIM thing

