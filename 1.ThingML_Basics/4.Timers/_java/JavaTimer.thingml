import "../Timer.thingml"

object JTimerTask
@java_type "java.util.TimerTask";

object JTimer
@java_type "java.util.Timer";

// Manage a set of software timers.
thing TimerJava includes Timer
{
    readonly property timer : JTimer = 'new java.util.Timer()' as JTimer
    property timer_task : JTimerTask

    function startTimer(delay : Integer) do
        cancel()
        'java.util.TimerTask temp_task = new java.util.TimerTask(){public void run(){' timer!timer_timeout() '}};'
        timer_task = 'temp_task' as JTimerTask
        '' & timer & '.schedule(' & timer_task & ', ' & delay & ');'
    end

    function cancel() do
        if (timer_task != 'null') do
            '' & timer_task & '.cancel();'
            '' & timer & '.purge();'
        end
    end

    statechart SoftTimer init default {
        state default {

          internal event m : timer?timer_start
            guard m.delay > 0
            action startTimer(m.delay)

          internal cancel
            event m : timer?timer_cancel
            action cancel()
        }
    }
}

configuration TestTimerJava {
    instance timer : TimerJava
    instance client : HelloTimer//this is your application
    connector client.timer => timer.timer    
}
